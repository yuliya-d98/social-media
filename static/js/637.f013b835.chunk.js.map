{"version":3,"file":"static/js/637.f013b835.chunk.js","mappings":"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","sources":["webpack://react-01/./src/components/main/profile/profile.module.css?d10e","webpack://react-01/./src/components/main/profile/user/profile-data-form.module.css?f5f6","components/main/profile/user/profile-data-form.tsx","webpack://react-01/./src/components/main/profile/user/profile-status.module.css?d708","components/main/profile/user/profile-status-with-hooks.tsx","webpack://react-01/./src/components/main/profile/user/user.module.css?42c1","components/main/profile/user/user.tsx","webpack://react-01/./src/components/main/profile/posts/posts.module.css?7405","webpack://react-01/./src/components/main/profile/posts/post/post.module.css?7a47","components/main/profile/posts/post/post.tsx","components/main/profile/posts/posts.tsx","components/main/profile/posts/postsContainer.tsx","components/main/profile/profile.tsx","components/main/profile/profileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"parallax\":\"profile_parallax__2ResI\"};","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"profile-data-form_label__gQoQd\",\"link\":\"profile-data-form_link__Vrkam\",\"checkbox\":\"profile-data-form_checkbox__mNqX7\",\"form\":\"profile-data-form_form__cAwn9\",\"paragraph\":\"profile-data-form_paragraph__j6pZ-\"};","import { ChangeEvent, useState } from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { ProfileType } from '../../../../types/types';\r\nimport { required } from '../../../../utils/validators/validators';\r\nimport { Input, Textarea } from '../../../common/forms-controls/forms-controls';\r\nimport formStyle from './../../../common/forms-controls/forms-controls.module.css';\r\nimport s from './profile-data-form.module.css';\r\n\r\ntype ContactPropsType = {\r\n  contact: string;\r\n};\r\n\r\nconst Contact = ({ contact }: ContactPropsType) => {\r\n  return (\r\n    <div className={s.link}>\r\n      <label htmlFor={contact} className={s.label}>{`${contact}: `}</label>\r\n      <Field component={Input} type=\"text\" id={contact} name={'contacts.' + contact} />\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileFormOwnPropsType = {\r\n  profile: ProfileType;\r\n  initialValues: ProfileType;\r\n  fromEditMode: () => void;\r\n};\r\n\r\ntype FormType = InjectedFormProps<ProfileType, ProfileFormOwnPropsType> & ProfileFormOwnPropsType;\r\n\r\nconst ProfileDataForm = ({ handleSubmit, error, profile }: FormType) => {\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const onCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const checkbox = e.target;\r\n    setChecked(checkbox.checked);\r\n  };\r\n\r\n  if (error) console.log(error);\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label htmlFor=\"fullName\" className={s.label}>\r\n        Fullname:{' '}\r\n      </label>\r\n      <Field component={Input} validate={[required]} type=\"text\" id=\"fullName\" name=\"fullName\" />\r\n      <label htmlFor=\"aboutMe\" className={s.label}>\r\n        About me:{' '}\r\n      </label>\r\n      <Field component={Textarea} validate={[required]} type=\"text\" id=\"aboutMe\" name=\"aboutMe\" />\r\n      <Field\r\n        component={Input}\r\n        type=\"checkbox\"\r\n        id=\"lookingForAJob\"\r\n        name=\"lookingForAJob\"\r\n        onChange={onCheckboxChange}\r\n        className={formStyle.checkbox}\r\n      />\r\n      <label htmlFor=\"lookingForAJob\" className={formStyle.checkboxLabel}>\r\n        Looking for a job\r\n      </label>\r\n      {checked && (\r\n        <label htmlFor=\"lookingForAJobDescription\" className={s.label}>\r\n          Your skills:{' '}\r\n        </label>\r\n      )}\r\n      {checked && (\r\n        <Field\r\n          component={Textarea}\r\n          validate={[required]}\r\n          id=\"lookingForAJobDescription\"\r\n          name=\"lookingForAJobDescription\"\r\n        />\r\n      )}\r\n      <p className={s.paragraph}>Contacts:</p>\r\n      {Object.keys(profile.contacts).map((link) => (\r\n        <Contact contact={link} key={link} />\r\n      ))}\r\n      {error && <p className={formStyle.formSummaryError}>{error}</p>}\r\n      <button className={formStyle.button}>Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<ProfileType, ProfileFormOwnPropsType>({\r\n  form: 'profile',\r\n})(ProfileDataForm);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"profile-status_container__HvjWR\",\"input\":\"profile-status_input__72uKi\",\"text\":\"profile-status_text__7aJ-9\"};","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport s from './profile-status.module.css';\r\n\r\ntype PropsType = {\r\n  status: string | null;\r\n  isOwner: boolean;\r\n  updateStatus: (status: string | null) => Promise<void>;\r\n};\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    if (props.isOwner) setStatus(props.status);\r\n  }, [props.status, props.isOwner]);\r\n\r\n  const activateMode = () => {\r\n    if (props.isOwner) setEditMode(true);\r\n  };\r\n\r\n  const deactivateMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      {editMode ? (\r\n        <input\r\n          className={s.input}\r\n          onBlur={deactivateMode}\r\n          onChange={onStatusChange}\r\n          value={status || ''}\r\n          autoFocus\r\n          maxLength={300}\r\n        />\r\n      ) : (\r\n        <p className={s.text} onDoubleClick={activateMode}>\r\n          {props.status || 'No status'}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"user_user__s9iKW\",\"image\":\"user_image__YH3Qz\",\"input\":\"user_input__NTRs8\",\"label\":\"user_label__SFuo-\",\"aboutUser\":\"user_aboutUser__NPzWn\",\"contacts\":\"user_contacts__l3zWG\",\"button\":\"user_button__WDYvr\"};","import clsx from 'clsx';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport defaultAvatar from '../../../../assets/user-avatar.png';\r\nimport { ProfileType } from '../../../../types/types';\r\nimport Preloader from '../../../common/preloader';\r\nimport formStyle from './../../../common/forms-controls/forms-controls.module.css';\r\nimport ProfileDataForm from './profile-data-form';\r\nimport ProfileStatusWithHooks from './profile-status-with-hooks';\r\nimport s from './user.module.css';\r\n\r\n// const bestAvatarEver = 'https://sib.fm/storage/article/April2021/Kb1KiTYol9I62IHiyBgV.jpeg';\r\n\r\ntype UserLinkPropsType = {\r\n  href: string | null;\r\n};\r\n\r\nconst UserLink: React.FC<UserLinkPropsType> = ({ href }) => {\r\n  return (\r\n    <i>\r\n      {href ? (\r\n        <a href={href} target=\"_blank\" rel=\"noreferrer\">\r\n          {href}\r\n        </a>\r\n      ) : (\r\n        'no link'\r\n      )}\r\n    </i>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType;\r\n  status: string | null;\r\n  isOwner: boolean;\r\n  updateStatus: (status: string | null) => Promise<void>;\r\n  toEditMode: () => void;\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  toEditMode,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <h2 className={s.header}>{profile.fullName || 'username'}</h2>\r\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus} isOwner={isOwner} />\r\n      <div className={s.aboutUser}>\r\n        <p>\r\n          About me: <i>{profile.aboutMe || 'no info'}</i>\r\n        </p>\r\n        <p>\r\n          Looking for a job: <i>{profile.lookingForAJob ? 'yes' : 'no'}</i>\r\n        </p>\r\n        {profile.lookingForAJob && (\r\n          <p>\r\n            My professional skills: <i>{profile.lookingForAJobDescription || 'no description'}</i>\r\n          </p>\r\n        )}\r\n      </div>\r\n      <div className={s.contacts}>\r\n        <p>Contacts:</p>\r\n        {Object.keys(profile.contacts).map((link) => (\r\n          <p key={link}>\r\n            {link}: <UserLink href={profile.contacts[link as keyof typeof profile.contacts]} />\r\n          </p>\r\n        ))}\r\n      </div>\r\n      {isOwner && (\r\n        <button onClick={toEditMode} className={clsx(formStyle.button, s.button)}>\r\n          Edit\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype UserPropsType = {\r\n  profile: ProfileType | null;\r\n  status: string | null;\r\n  isOwner: boolean;\r\n  updateStatus: (status: string | null) => Promise<void>;\r\n  savePhoto: (photo: File) => Promise<void>;\r\n  setProfileData: (profile: ProfileType) => Promise<void>;\r\n};\r\n\r\nconst User: React.FC<UserPropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  setProfileData,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const toEditMode = () => setEditMode(true);\r\n\r\n  const fromEditMode = () => setEditMode(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    console.log('formData', formData);\r\n    setProfileData(formData).then(() => fromEditMode());\r\n  };\r\n\r\n  return (\r\n    <div className={s.user}>\r\n      <div className={s.avatar}>\r\n        <img className={s.image} src={profile.photos.large || defaultAvatar} alt=\"user\" />\r\n        {isOwner && (\r\n          <input className={s.input} type=\"file\" onChange={onMainPhotoSelected} id=\"photo\" />\r\n        )}\r\n        {isOwner && (\r\n          <label className={s.label} htmlFor=\"photo\">\r\n            Choose photo\r\n          </label>\r\n        )}\r\n      </div>\r\n      {editMode ? (\r\n        <ProfileDataForm\r\n          initialValues={profile}\r\n          fromEditMode={fromEditMode}\r\n          onSubmit={onSubmit}\r\n          profile={profile}\r\n        />\r\n      ) : (\r\n        <ProfileData\r\n          profile={profile}\r\n          status={status}\r\n          updateStatus={updateStatus}\r\n          isOwner={isOwner}\r\n          toEditMode={toEditMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"posts_posts__zalJ9\",\"header\":\"posts_header__wgjik\",\"button\":\"posts_button__FtaA0\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"post_post__qbpcU\",\"avatar\":\"post_avatar__GHvuP\",\"username\":\"post_username__Ewa3W\"};","import React from 'react';\r\nimport s from './post.module.css';\r\nimport defaultAvatar from '../../../../../assets/user-avatar.png';\r\n\r\ntype PostPropsType = {\r\n  message: string;\r\n  username: string | null;\r\n  photo: string | null;\r\n};\r\n\r\nconst Post = (props: PostPropsType) => {\r\n  return (\r\n    <div className={s.post}>\r\n      <img className={s.avatar} src={props.photo || defaultAvatar} alt=\"user\" />\r\n      <div className={s.text}>\r\n        <p className={s.username}>{props.username}</p>\r\n        <p className={s.posttext}>{props.message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './posts.module.css';\r\nimport Post from './post/post';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Field } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../../utils/validators/validators';\r\nimport { Textarea } from '../../../common/forms-controls/forms-controls';\r\nimport formStyle from '../../../common/forms-controls/forms-controls.module.css';\r\nimport { PostType } from '../../../../types/types';\r\n\r\nconst maxLength400 = maxLengthCreator(400);\r\ntype FormDataType = {\r\n  post: string;\r\n};\r\ntype PostsFormOwnPropsType = Record<string, unknown>;\r\ntype FormType = InjectedFormProps<FormDataType, PostsFormOwnPropsType> & PostsFormOwnPropsType;\r\n\r\nconst addPostForm = (props: FormType) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        validate={[required, maxLength400]}\r\n        className={formStyle.textarea}\r\n        name=\"post\"\r\n        rows=\"5\"\r\n        placeholder=\"your news...\"\r\n        required\r\n      />\r\n      <button className={s.button}>Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType, PostsFormOwnPropsType>({ form: 'addPost' })(\r\n  addPostForm\r\n);\r\n\r\ntype PostsPropsType = {\r\n  postsData: Array<PostType>;\r\n  username: string | null;\r\n  photo: string | null;\r\n\r\n  addPost: (post: string) => void;\r\n};\r\n\r\nconst Posts = React.memo((props: PostsPropsType) => {\r\n  const postItems = props.postsData.map((post) => (\r\n    <Post username={props.username} message={post.message} photo={props.photo} key={post.message} />\r\n  ));\r\n\r\n  const onAddPost = (values: FormDataType) => {\r\n    props.addPost(values.post);\r\n  };\r\n\r\n  return (\r\n    <div className={s.posts}>\r\n      <h3 className={s.header}>My posts</h3>\r\n      <AddPostReduxForm onSubmit={onAddPost} />\r\n      {postItems}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Posts;\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../../redux/redux-store';\r\nimport Posts from './posts';\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  postsData: state.profilePage.postsData,\r\n  // newPostText: state.profilePage.newPostText,\r\n});\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\n\r\ntype MapDispatchPropsType = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\ntype OwnPropsType = {\r\n  username: string | null;\r\n  photo: string | null;\r\n};\r\n\r\nconst addPost = actions.addPostActionCreator;\r\n\r\nconst PostsContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n  mapStateToProps,\r\n  { addPost }\r\n)(Posts);\r\n\r\nexport default PostsContainer;\r\n","import React from 'react';\r\nimport s from './profile.module.css';\r\nimport User from './user/user';\r\nimport PostsContainer from './posts/postsContainer';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string | null;\r\n  isOwner: boolean;\r\n\r\n  updateStatus: (status: string | null) => Promise<void>;\r\n  savePhoto: (photo: File) => Promise<void>;\r\n  setProfileData: (profile: ProfileType) => Promise<void>;\r\n};\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <main className={s.content}>\r\n      <User\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        setProfileData={props.setProfileData}\r\n      />\r\n      <PostsContainer\r\n        username={props.profile ? props.profile.fullName : 'username'}\r\n        photo={props.profile ? props.profile.photos.small : null}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate, PathMatch, useMatch } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { profileAPI } from '../../../api/profileAPI';\r\nimport {\r\n  getStatus,\r\n  actions,\r\n  updateStatus,\r\n  savePhoto,\r\n  setProfileData,\r\n} from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { ProfileType } from '../../../types/types';\r\nimport Profile from './profile';\r\n\r\ntype MapStatePropsType = {\r\n  profile: ProfileType | null;\r\n  status: string | null;\r\n  authorizedUserId: number | null;\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  setUserProfile: (profile: ProfileType) => Promise<void>;\r\n  getStatus: (userId: number) => Promise<void>;\r\n  updateStatus: (status: string | null) => Promise<void>;\r\n  savePhoto: (photo: File) => Promise<void>;\r\n  setProfileData: (profile: ProfileType) => Promise<void>;\r\n};\r\n\r\ntype OwnProps = {\r\n  match: PathMatch<'userId'> | null;\r\n};\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnProps;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number;\r\n    if (this.props.match && this.props.match.params.userId) {\r\n      userId = +this.props.match.params.userId;\r\n    } else if (this.props.isAuth && this.props.authorizedUserId) {\r\n      userId = this.props.authorizedUserId;\r\n    } else {\r\n      return <Navigate to=\"/login\" />;\r\n    }\r\n\r\n    profileAPI.getProfile(userId).then((data) => this.props.setUserProfile(data));\r\n    profileAPI.getStatus(userId).then((status) => this.props.updateStatus(status));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    const newUserId = this.props.match ? this.props.match.params.userId : null;\r\n    const prevUserId = prevProps.match ? prevProps.match.params.userId : null;\r\n    if (newUserId !== prevUserId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Profile {...this.props} isOwner={!this.props.match} />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withRouter = (Component: typeof ProfileContainer) => {\r\n  const RouterComponent = (props: PropsType) => {\r\n    const match = useMatch('/profile/:userId/');\r\n    return <Component {...props} match={match} />;\r\n  };\r\n  return RouterComponent;\r\n};\r\n\r\nconst setUserProfile = actions.setUserProfile;\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { setUserProfile, getStatus, updateStatus, savePhoto, setProfileData }),\r\n  withRouter\r\n  // withAuthRedirect\r\n)(ProfileContainer);\r\n"],"names":["Contact","contact","className","s","htmlFor","Field","component","Input","type","id","name","reduxForm","form","handleSubmit","error","profile","useState","checked","setChecked","console","log","onSubmit","validate","required","Textarea","onChange","e","checkbox","target","formStyle","Object","keys","contacts","map","link","props","editMode","setEditMode","status","setStatus","useEffect","isOwner","onBlur","updateStatus","currentTarget","value","autoFocus","maxLength","onDoubleClick","UserLink","href","rel","ProfileData","toEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","onClick","clsx","savePhoto","setProfileData","fromEditMode","src","photos","large","defaultAvatar","alt","files","length","initialValues","formData","then","photo","username","message","maxLength400","maxLengthCreator","AddPostReduxForm","rows","placeholder","React","postItems","postsData","post","values","addPost","actions","connect","state","profilePage","Posts","small","ProfileContainer","userId","this","match","params","isAuth","authorizedUserId","to","profileAPI","data","setUserProfile","refreshProfile","prevProps","withRouter","Component","useMatch","compose","auth","getStatus"],"sourceRoot":""}