{"version":3,"file":"static/js/103.b8fcdd08.chunk.js","mappings":"0OAKMA,EAA6B,SAACC,GAAD,MAA0B,CAC3DC,OAAQD,EAAME,KAAKD,S,qDCLrB,EAA4B,2BAA5B,EAAiE,yBAAjE,EAAuG,4BAAvG,EAA8I,0BAA9I,EAAsL,6BAAtL,EAAgO,4BAAhO,EAA0Q,6B,UCgB1Q,EARmB,SAACE,GAClB,OACE,SAAC,KAAD,CAASC,UAAWC,EAAcC,GAAE,mBAAcH,EAAMI,IAAxD,SACGJ,EAAMK,QCGb,EARoB,SAACL,GACnB,OACE,0BACE,gBAAKC,UAAWC,EAAhB,SAAgCF,EAAMM,UCAtCC,GAAeC,EAAAA,EAAAA,GAAiB,KA8BhCC,GAAsBC,EAAAA,EAAAA,GAA0D,CACpFC,KAAM,wBADoBD,EAjBL,SAACV,GACtB,OACE,kBAAMY,SAAUZ,EAAMa,aAAtB,WACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBF,KAAK,aACLJ,UAAWC,EAEXiB,YAAY,wBACZC,KAAK,OAEP,mBAAQnB,UAAWC,EAAnB,wBAqCN,EAvBgB,SAACF,GACf,IAAMqB,EAAcrB,EAAMsB,aAAaC,WAAWC,KAAI,SAACC,GAAD,OACpD,SAAC,EAAD,CAAYpB,KAAMoB,EAAOpB,KAAMD,GAAIqB,EAAOrB,IAASqB,EAAOrB,OAEtDsB,EAAe1B,EAAMsB,aAAaK,YAAYH,KAAI,SAACI,EAASC,GAAV,OACtD,SAAC,EAAD,CAAavB,KAAMsB,EAAQtB,MAAWuB,MAOxC,OACE,iBAAK5B,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAA4BmB,KAC5B,iBAAKpB,UAAWC,EAAhB,UACGwB,GACD,SAACjB,GAAD,kBAAyBT,GAAzB,IAAgCY,SAThB,SAACkB,GACrB9B,EAAM+B,YAAYD,EAAOE,uBC7C7B,GAAeC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPsB,SAACrC,GACvB,MAAO,CACLyB,aAAczB,EAAMyB,gBAKG,CAAES,YAAaI,EAAAA,EAAAA,eLFnC,SAA+BC,GAgBpC,OAVuCF,EAAAA,EAAAA,IAMrCtC,EACA,GAPqCsC,EALb,SAAClC,GACzB,IAAQF,EAAyBE,EAAzBF,OAAWuC,GAAnB,OAAiCrC,EAAjC,GACA,OAAKF,GACE,SAACsC,GAAD,UAAuBC,KADV,SAAC,KAAD,CAAUlC,GAAG,gBKFrC,CAGEmC","sources":["hoc/with-auth-redirect.tsx","webpack://react-01/./src/components/main/dialogs/dialogs.module.css?14bd","components/main/dialogs/dialogItem/dialogItem.tsx","components/main/dialogs/messageItem/messageItem.tsx","components/main/dialogs/dialogs.tsx","components/main/dialogs/dialogsContainer.tsx"],"sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToPropsForRedirect>;\r\ntype DispatchPropsType = Record<string, never>;\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent = (props: MapPropsType & DispatchPropsType) => {\r\n    const { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Navigate to=\"/login\" />;\r\n    return <WrappedComponent {...(restProps as unknown as WCP)} />;\r\n  };\r\n  const ConnectedAuthRedirectComponent = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    WCP,\r\n    AppStateType\r\n  >(\r\n    mapStateToPropsForRedirect,\r\n    {}\r\n  )(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"dialogs_container__yido9\",\"dialogs\":\"dialogs_dialogs__MqD3N\",\"dialogItem\":\"dialogs_dialogItem__Q6EwB\",\"messages\":\"dialogs_messages__eqczW\",\"messageItem\":\"dialogs_messageItem__d51bV\",\"newMessage\":\"dialogs_newMessage__Rcx9t\",\"sendMessage\":\"dialogs_sendMessage__3GU1M\"};","import React from 'react';\r\nimport s from '../dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype DialogItemPropsType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n  return (\r\n    <NavLink className={s.dialogItem} to={`/dialogs/${props.id}`}>\r\n      {props.name}\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from '../dialogs.module.css';\r\n\r\ntype MessageItemPropsType = {\r\n  text: string;\r\n};\r\n\r\nconst MessageItem = (props: MessageItemPropsType) => {\r\n  return (\r\n    <div>\r\n      <div className={s.messageItem}>{props.text}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageItem;\r\n","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Field } from 'redux-form';\r\nimport { InitialStateType } from '../../../redux/dialogs-reducer';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/forms-controls/forms-controls';\r\nimport DialogItem from './dialogItem/dialogItem';\r\nimport s from './dialogs.module.css';\r\nimport MessageItem from './messageItem/messageItem';\r\n\r\nconst maxLength400 = maxLengthCreator(400);\r\n\r\ntype AddMessageFormData = {\r\n  newMessage: string;\r\n};\r\n\r\ntype AddMessageFormOwnPropsType = {\r\n  messagesPage: InitialStateType;\r\n};\r\n\r\ntype FormType = InjectedFormProps<AddMessageFormData, AddMessageFormOwnPropsType> &\r\n  AddMessageFormOwnPropsType;\r\n\r\nconst AddMessageForm = (props: FormType) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        validate={[required, maxLength400]}\r\n        name=\"newMessage\"\r\n        className={s.newMessage}\r\n        // value={props.messagesPage.newMessageText}\r\n        placeholder=\"write your message...\"\r\n        rows=\"5\"\r\n      />\r\n      <button className={s.sendMessage}>Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm<AddMessageFormData, AddMessageFormOwnPropsType>({\r\n  form: 'dialogAddMessageForm',\r\n})(AddMessageForm);\r\n\r\ntype PropsType = {\r\n  messagesPage: InitialStateType;\r\n  sendMessage: (message: string) => void;\r\n};\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n  const dialogItems = props.messagesPage.dialogData.map((dialog) => (\r\n    <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />\r\n  ));\r\n  const messageItems = props.messagesPage.messageData.map((message, index) => (\r\n    <MessageItem text={message.text} key={index} />\r\n  ));\r\n\r\n  const addNewMessage = (values: { newMessage: string }) => {\r\n    props.sendMessage(values.newMessage);\r\n  };\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.dialogs}>{dialogItems}</div>\r\n      <div className={s.messages}>\r\n        {messageItems}\r\n        <AddMessageReduxForm {...props} onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../../hoc/with-auth-redirect';\r\nimport { actions } from '../../../redux/dialogs-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport Dialogs from './dialogs';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { sendMessage: actions.sendMessage }),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","props","className","s","to","id","name","text","maxLength400","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","rows","dialogItems","messagesPage","dialogData","map","dialog","messageItems","messageData","message","index","values","sendMessage","newMessage","compose","connect","actions","WrappedComponent","restProps","Dialogs"],"sourceRoot":""}