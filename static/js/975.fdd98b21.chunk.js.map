{"version":3,"file":"static/js/975.fdd98b21.chunk.js","mappings":"6PAEaA,EAAiB,SAACC,GAC7B,OAAOA,EAAMC,KAAKC,UAGPC,EAAe,SAACH,GAC3B,OAAOA,EAAMC,KAAKG,Q,SCKZC,EAAaC,EAAAA,EAAAA,SAMrB,EAJ2B,WACzB,OAAO,SAACC,EAAD,KAKHA,EAAiB,WACrB,IAAMH,GAASI,EAAAA,EAAAA,IAAYL,GACrBM,GAAWC,EAAAA,EAAAA,MAQjB,OAPAC,EAAAA,EAAAA,YAAU,WAER,OADAF,GAASG,EAAAA,EAAAA,OACF,WACLH,GAASI,EAAAA,EAAAA,UAEV,KAGD,gCACc,UAAXT,IAAsB,oEACvB,SAACU,EAAD,KACA,SAACC,EAAD,QAKAD,EAAqB,WACzB,IAAME,GAAeR,EAAAA,EAAAA,IAAYT,GACjC,GAAwCkB,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAmBC,EAAAA,EAAAA,QAA8B,OACvDV,EAAAA,EAAAA,YAAU,WACW,IAAD,EAAdO,IAMF,UAAAE,EAAiBE,eAAjB,SAA0BC,eAAe,CAAEC,MAAO,MAAOC,SAAU,cAIpE,CAACT,IAWJ,OACE,iBAAKU,MAAO,CAAEC,OAAQ,sBAAuBC,UAAW,QAAUC,SAV9C,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC7EnB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAKlC,UACGH,EAAasB,KAAI,SAACC,GAAD,OAChB,mBAACC,GAAD,kBAAaD,GAAb,IAAgBE,IAAKF,EAAEG,UAEzB,gBAAKC,IAAKvB,QAKVoB,EAAwCI,EAAAA,MAAW,SAACC,GACxD,OACE,4BACE,SAAC,IAAD,CAAQnB,MAAO,CAAEoB,gBAAiB,WAAaC,IAAKF,EAAMG,MAAOC,MAAM,SAACC,EAAA,EAAD,OACvE,0BAAOL,EAAMM,YACb,uBAAIN,EAAMO,WACV,wBAKArC,EAA2B,WAC/B,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOmC,EAAP,KAAgBC,EAAhB,KACMjD,GAASI,EAAAA,EAAAA,IAAYL,GAErBM,GAAWC,EAAAA,EAAAA,MAUjB,OACE,UAAC,IAAD,YACE,SAACL,EAAD,CAAUiD,KAAM,EAAGC,SAAU,SAACzB,GAAD,OAAOuB,EAAWvB,EAAEE,cAAcwB,QAAQA,MAAOJ,KAC9E,SAAC,IAAD,CAAQK,QAXU,WACfL,IAGL3C,GAASiD,EAAAA,EAAAA,IAAYN,IACrBC,EAAW,MAMuBM,SAAqB,UAAXvD,EAA1C","sources":["redux/chat-selectors.ts","pages/chat/chat-page.tsx"],"sourcesContent":["import { AppStateType } from './redux-store';\r\n\r\nexport const selectMessages = (state: AppStateType) => {\r\n  return state.chat.messages;\r\n};\r\n\r\nexport const selectStatus = (state: AppStateType) => {\r\n  return state.chat.status;\r\n};\r\n","import { UserOutlined } from '@ant-design/icons';\r\nimport { Button, Input, Form, Avatar } from 'antd';\r\nimport React from 'react';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ChatMessageAPIType } from '../../api/chat-api';\r\nimport {\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from '../../redux/chat-reducer';\r\nimport { selectMessages, selectStatus } from '../../redux/chat-selectors';\r\nconst { TextArea } = Input;\r\n\r\nconst ChatPage: React.FC = () => {\r\n  return <Chat />;\r\n};\r\n\r\nexport default ChatPage;\r\n\r\nconst Chat: React.FC = () => {\r\n  const status = useSelector(selectStatus);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {status === 'error' && <p>Some error occured, please refresh page</p>}\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC = () => {\r\n  const messagesData = useSelector(selectMessages);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(false);\r\n\r\n  const messageAnchorRef = useRef<HTMLDivElement | null>(null);\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      //   window.scrollTo({\r\n      //     top: container.scrollHeight,\r\n      //     behavior: \"smooth\"\r\n      // })\r\n      // Если добавить новый экшн по зачистке стэйта и диспатчить его  в stopMessagesListening, то все работает хорошо и скролл в том числе.\r\n      messageAnchorRef.current?.scrollIntoView({ block: 'end', behavior: 'smooth' });\r\n      // messageAnchorRef.current?.scrollIntoView(true);\r\n      // messageAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messagesData]);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: 'calc(100vh - 300px)', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n      {messagesData.map((m) => (\r\n        <Message {...m} key={m.id} />\r\n      ))}\r\n      <div ref={messageAnchorRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<ChatMessageAPIType> = React.memo((props) => {\r\n  return (\r\n    <div>\r\n      <Avatar style={{ backgroundColor: '#87d068' }} src={props.photo} icon={<UserOutlined />} />\r\n      <span>{props.userName}</span>\r\n      <p>{props.message}</p>\r\n      <hr />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n  const [message, setMessage] = useState('');\r\n  const status = useSelector(selectStatus);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSendMessage = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessage(message));\r\n    setMessage('');\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      <TextArea rows={4} onChange={(e) => setMessage(e.currentTarget.value)} value={message} />\r\n      <Button onClick={onSendMessage} disabled={status !== 'ready'}>\r\n        Send\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n"],"names":["selectMessages","state","chat","messages","selectStatus","status","TextArea","Input","Chat","useSelector","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messagesData","useState","isAutoScroll","setIsAutoScroll","messageAnchorRef","useRef","current","scrollIntoView","block","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","key","id","ref","React","props","backgroundColor","src","photo","icon","UserOutlined","userName","message","setMessage","rows","onChange","value","onClick","sendMessage","disabled"],"sourceRoot":""}